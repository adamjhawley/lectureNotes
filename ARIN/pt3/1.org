#+LATEX_HEADER: \usepackage{turnstile}
#+TITLE: Lecture 1: Logical Agents
#+AUTHOR: Adam Hawley

* Intro
The slides are very similar to the content of the book.
See chapter 7.

* Knowledge Bases
- Knowledge base :: Set of *sentences* in a *formal* language.
The declarative approach to building an agent (or other system) is to tell it what it needs to know.
Then it can ask itself what to do and the answers should follow from the KB.
Agents can be viewed:
- At the knowledge level: what they know, regardless of how they are implemented
- At the implementation level: data structures in KB and algorithms that manipulate them

* Logic in General
- *Logics* are formal languages for representing information such that conclusions can be drawn.
- *Syntax* defines the sentences in the language.
- *Semantics* define the /meaning/ of the sentences; i.e define truth of a sentence in a world.

* Entailment
- *Entailment* means that one thing follows from another:
\begin{equation}
KB \models \alpha
\end{equation}
This means knowledge base $KB$ entails sentence \alpha if and only if \alpha is true in all worlds where $KB$ is true.
E.g. $x + y = 4$ entails $4 = x + y$
Entailment is a relationship between sentences (i.e. syntax) that is based on semantics.

* Models
Logicians typically think of *models*, which are formally structured worlds with respect to which truth can be evaluated.
We say /m/ *is a model of* a sentence \alpha if \alpha is true in /m/.
M(\alpha) is the set of all models of \alpha

* Inference
In logic an inference is a procedure by which you can deduce that something does follow from something else.
- $KB \vdash_i \alpha =$ sentence \alpha can be derived form $KB$ by procedure /i/.
- *Soundness*: /i/ is sound if whenever $KB \vdash_i \alpha$, it is also true that $KB \models \alpha$.
- *Completeness*: /i/ is complete if whenever $KB \models \alpha$, it is also true that $KB \vdash_i \alpha$.

* Propositional Logic: Syntax
Propositional logic is the simples logic.
The proposition sumbold /P_1/, /P_2/ etc are senetences.
If /S/ is a sentence, Â¬S is also a sentence (through negation).
This also applies for the rules of:
- Conjuction
- Disjunction
- Implication
- Biconditional

* Logical Equivalence
Two sentences are *logically equivalent* iff true in the same models:
- $\alpha \equiv \beta$ if and only if $\alpha \models \beta$ and $\beta \models \alpha$

* Validity & Satisfiability
A sentence is *valid* if it is true in all models (e.g $True$, $A\lor\neg A$, $A\implies A$).
Validity is connected to inference via the *Deduction Theorem*:
- $KB \models \alpha$ if and only f $(KB \implies \alpha)$ is valid.
A sentence is *satisfiable* if it is true in /some/ model (e.g. $A\lor B$).
A sentence is *unsatisfiable* if it is true in /no/ models (e.g. $A\land \neg A$)
Satisfiability is connected to inference via the following:
- $KB \models \alpha$ if and only if $(KB \land \neg \alpha)$ is unsatisfiable, i.e. prove \alpha by /reductio ad absurdum/.

* Proof Methods
Proof methods divide into (roughly) two kinds:
- *Application of Inference Rules*:
  + Legitimate (sound) generation of new sentences from old.
  + Proof = a sequence of inference rule applications (can use inference rules as operators in a standard search alg).
  + Typically require translation of sentences into a *normal form*.
- *Model Checking*:
  + Truth table (always exponential in /n/)
  + Improved backtracking
  + Heuristic search in model space (sound but incomplete)
  


